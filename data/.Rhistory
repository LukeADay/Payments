my_sankey <- sankeyNetwork(Links = my_df, Nodes = my_nodes, Source = "source", Target = "target",
Value = "value", NodeID = "name", NodeGroup = "group", width = 800, height = 400)
# Check if the Sankey diagram is not empty
if (is.null(my_sankey)) {
cat("The Sankey diagram is empty. Please check your data and code.")
} else {
# View the Sankey diagram
my_sankey
}
#my_df %>% str()
#my_df <- my_df %>% mutate_if(is.character, as.numeric)
#head(my_df)
#min_idx <- min(c(min(my_df$source), min(my_df$target)))
# Subtract the minimum value from all indices
#my_df$source <- my_df$source - min_idx
#my_df$target <- my_df$target - min_idx
library(DiagrammeR)
library(rpart)
library(networkD3)
# Load the iris dataset
data(iris)
# Build the rpart tree
my_tree <- rpart(Species ~ ., data = iris)
# Convert the rpart tree into a dataframe
my_df <- data.frame(source = rownames(my_tree$frame)[-1],
target = rownames(my_tree$frame)[-nrow(my_tree$frame)],
value = round(my_tree$frame[-1, "n"], 2))
# Create the nodes dataframe
my_nodes <- data.frame(name = unique(c(my_df$source, my_df$target)))
# Assign a group to each node based on the source/target column
my_nodes$group <- ifelse(my_nodes$name %in% my_df$source, 1, 2)
# Create the Sankey diagram
my_sankey <- sankeyNetwork(Links = my_df, Nodes = my_nodes, Source = "source", Target = "target",
Value = "value", NodeID = "name", NodeGroup = "group", width = 800, height = 400)
# Check if the Sankey diagram is not empty
if (is.null(my_sankey)) {
cat("The Sankey diagram is empty. Please check your data and code.")
} else {
# View the Sankey diagram
my_sankey
}
#my_df %>% str()
#my_df <- my_df %>% mutate_if(is.character, as.numeric)
#head(my_df)
#min_idx <- min(c(min(my_df$source), min(my_df$target)))
# Subtract the minimum value from all indices
#my_df$source <- my_df$source - min_idx
#my_df$target <- my_df$target - min_idx
colourScale = JS("d3.scaleOrdinal(d3.schemeCategory20);"), fontSize = 7,
fontFamily = NULL, nodeWidth = 15, nodePadding = 10, margin = NULL,
height = NULL, width = NULL, iterations = 32, sinksRight = TRUE)
# Create the Sankey diagram
my_sankey <- sankeyNetwork(Links = my_df, Nodes = my_nodes, Source = "source", Target = "target",
Value = "value", NodeID = "name", NodeGroup = "group",
colourScale = JS("d3.scaleOrdinal(d3.schemeCategory20);"), fontSize = 7,
fontFamily = NULL, nodeWidth = 15, nodePadding = 10, margin = NULL,
height = NULL, width = NULL, iterations = 32, sinksRight = TRUE))
# Create the Sankey diagram
my_sankey <- sankeyNetwork(Links = my_df, Nodes = my_nodes, Source = "source", Target = "target",
Value = "value", NodeID = "name", NodeGroup = "group",
colourScale = JS("d3.scaleOrdinal(d3.schemeCategory20);"), fontSize = 7,
fontFamily = NULL, nodeWidth = 15, nodePadding = 10, margin = NULL,
height = NULL, width = NULL, iterations = 32, sinksRight = TRUE)
# Check if the Sankey diagram is not empty
if (is.null(my_sankey)) {
cat("The Sankey diagram is empty. Please check your data and code.")
} else {
# View the Sankey diagram
my_sankey
}
# Load packages
library(rpart)
library(networkD3)
# Fit rpart model to predict Sepal.Width using the other variables in the iris dataset
model <- rpart(Sepal.Width ~ ., data = iris)
# Extract the nodes and links from the model
nodes <- data.frame(name = unique(c(model$frame$var, names(iris)[-1])))
links <- data.frame(source = match(model$frame$var, nodes$name) - 1,
target = match(names(iris)[-1], nodes$name) - 1,
value = model$frame$n)
> # Extract the nodes and links from the model
> nodes <- data.frame(name = unique(c(model$frame$var, names(iris)[-1])))
> links <- data.frame(source = match(model$frame$var, nodes$name) - 1,
+                     target = match(names(iris)[-1], nodes$name) - 1,
+                     value = model$frame$n)
Error in data.frame(source = match(model$frame$var, nodes$name) - 1, target = match(names(iris)[-1],  :
arguments imply differing number of rows: 13, 4
# Load packages
library(rpart)
library(networkd3)
library(networkd3)
library(networkD3)
# Fit rpart model to predict Sepal.Width using the other variables in the iris dataset
model <- rpart(Sepal.Width ~ ., data = iris)
# Extract the nodes and links from the model
nodes <- data.frame(name = unique(c(model$frame$var, names(iris)[-1])))
links <- data.frame(source = match(model$frame$var[!is.na(model$frame$var)], nodes$name) - 1,
target = match(names(iris)[-1], nodes$name) - 1,
value = model$frame$n[!is.na(model$frame$var)])
my_sankey
onRender(my_sankey,
'
function(el,x) {
d3.select(el)
.selectAll(".node text")
.filter(function(d) { return d.name == "Cu in obsolete TVs"; })
.attr("x", x.options.nodeWidth - 16)
.attr("text-anchor", "end");
d3
.selectAll("rect")
.filter(function (d, i) { return i === 5;})
.attr("width", x.options.nodeWidth * 2);
}
'
)
library(htmlwidgets)
onRender(my_sankey,
'
function(el,x) {
d3.select(el)
.selectAll(".node text")
.filter(function(d) { return d.name == "Cu in obsolete TVs"; })
.attr("x", x.options.nodeWidth - 16)
.attr("text-anchor", "end");
d3
.selectAll("rect")
.filter(function (d, i) { return i === 5;})
.attr("width", x.options.nodeWidth * 2);
}
'
)
# Load required libraries
library(rpart)
library(networkD3)
# Fit rpart model to iris dataset
fit <- rpart(Species ~ ., data = iris)
# Create data frame for Sankey diagram
sankey_data <- data.frame(
from = c(tail(fit$frame$var, -1), rep(NA, fit$frame$ncompete[1])),
to = fit$f$where,
value = 1
)
#
# Load required libraries
library(rpart)
library(rpart.plot)
library(networkD3)
library(data.tree)
# Fit rpart model to iris dataset
fit <- rpart(Species ~ ., data = iris)
# Convert rpart model to data.tree object
pathList <- rpart2pathList(fit)
tree <- as.Node(pathList)
# Define rpart2pathList function
rpart2pathList <- function(fit) {
# Get the number of nodes in the tree
n <- fit$frame$n
# Initialize path list
pathList <- vector("list", n)
# Loop over nodes in tree
for (i in seq_len(n)) {
# Get node information
node <- fit$frame[i, ]
# Get node path
path <- .rpart2pathList(fit, i)
# Add node to path list
pathList[[i]] <- c(path, list(
name = ifelse(is.na(node$var), as.character(node$yval), node$var),
value = ifelse(is.na(node$var), 1, NA),
split = ifelse(is.na(node$var), NA, node$split),
prob = ifelse(is.na(node$var), node$yprob, NA)
))
}
return(pathList)
}
.rpart2pathList <- function(fit, i) {
# Get parent node index
parent <- fit$frame$parent[i]
# Check if root node
if (parent == 0) {
return(list())
}
# Get parent node information
parentNode <- fit$frame[parent, ]
# Get parent node path
parentPath <- .rpart2pathList(fit, parent)
# Add parent node to path
return(c(parentPath, list(
name = parentNode$var,
value = NA,
split = parentNode$split,
prob = NA
)))
}
# Load required libraries
library(rpart)
library(rpart.plot)
library(networkD3)
library(data.tree)
# Fit rpart model to iris dataset
fit <- rpart(Species ~ ., data = iris)
# Convert rpart model to data.tree object
pathList <- rpart2pathList(fit)
# Load required libraries
library(rpart)
library(data.tree)
library(DiagrammeR)
# Fit rpart model to iris dataset
fit <- rpart(Species ~ ., data = iris)
# Convert rpart model to data.tree object
tree <- as.Node(rpart2tree(fit))
# Define rpart2tree function
rpart2tree <- function(fit) {
# Get number of nodes in tree
n <- fit$frame$n
# Initialize tree
tree <- Node$new("root")
# Loop over nodes in tree
for (i in seq_len(n)) {
# Get node information
node <- fit$frame[i, ]
# Get node path
path <- .rpart2tree(fit, i)
# Add node to tree
if (length(path) > 0) {
tree$AddChildNode(
Node$new(
name = ifelse(is.na(node$var), as.character(node$yval), node$var),
value = ifelse(is.na(node$var), 1, NA),
split = ifelse(is.na(node$var), NA, node$split),
prob = ifelse(is.na(node$var), node$yprob, NA)
),
path
)
}
}
return(tree)
}
.rpart2tree <- function(fit, i) {
# Get parent node index
parent <- fit$frame$parent[i]
# Check if root node
if (parent == 0) {
return(character(0))
}
# Get parent node information
parentNode <- fit$frame[parent, ]
# Get parent node path
parentPath <- .rpart2tree(fit, parent)
# Add parent node to path
return(c(parentPath, parentNode$var))
}
# Load required libraries
library(rpart)
library(data.tree)
library(DiagrammeR
library(DiagrammeR
)x
library(DiagrammeR
library(DiagrammeR
)
library(DiagrammeR)
# Define rpart2tree function
rpart2tree <- function(fit) {
# Get number of nodes in tree
n <- fit$frame$n
# Initialize tree
tree <- Node$new("root")
# Loop over nodes in tree
for (i in seq_len(n)) {
# Get node information
node <- fit$frame[i, ]
# Get node path
path <- .rpart2tree(fit, i)
# Add node to tree
if (length(path) > 0) {
tree$AddChildNode(
Node$new(
name = ifelse(is.na(node$var), as.character(node$yval), node$var),
value = ifelse(is.na(node$var), 1, NA),
split = ifelse(is.na(node$var), NA, node$split),
prob = ifelse(is.na(node$var), node$yprob, NA)
),
path
)
}
}
return(tree)
}
.rpart2tree <- function(fit, i) {
# Get parent node index
parent <- fit$frame$parent[i]
# Check if root node
if (parent == 0) {
return(character(0))
}
# Get parent node information
parentNode <- fit$frame[parent, ]
# Get parent node path
parentPath <- .rpart2tree(fit, parent)
# Add parent node to path
return(c(parentPath, parentNode$var))
}
# Load required libraries
library(rpart)
library(data.tree)
library(DiagrammeR)
# Fit rpart model to iris dataset
fit <- rpart(Species ~ ., data = iris)
# Convert rpart model to data.tree object
tree <- as.Node(rpart2tree(fit))
library(rpart)
library(DiagrammeR)
# Fit an rpart model to the iris dataset
iris.rpart <- rpart(Species ~ ., data = iris)
# Convert the rpart object to a DiagrammeR graph
iris.graph <- ToDiagrammeRGraph(iris.rpart)
# Convert the DiagrammeR graph to a Sankey diagram
iris.sankey <- DiagrammeR::render_sankey(
iris.graph,
source_col = "label",
target_col = "edge_label",
value_col = "edge_weight",
node_title_col = "label",
link_title_col = "edge_label",
link_color = "#cccccc",
node_width = 30,
node_padding = 20,
link_width = 20,
margin_left = 100,
margin_right = 100,
margin_top = 50,
margin_bottom = 50
)
# Display the Sankey diagram
iris.sankey
library(rpart)
library(DiagrammeR)
# Fit an rpart model to the iris dataset
iris.rpart <- rpart(Species ~ ., data = iris)
# Convert the rpart object to a DiagrammeR graph
iris.graph <- ToDiagrammeRGraph(iris.rpart)
# Convert the DiagrammeR graph to a Sankey diagram
iris.sankey <- DiagrammeR::render_sankey(
iris.graph,
source_col = "label",
target_col = "edge_label",
value_col = "edge_weight",
node_title_col = "label",
link_title_col = "edge_label",
link_color = "#cccccc",
node_width = 30,
node_padding = 20,
link_width = 20,
margin_left = 100,
margin_right = 100,
margin_top = 50,
margin_bottom = 50
)
# Display the Sankey diagram
iris.sankey
plot(c(1:3))
# Load required libraries
library(rpart)
library(data.tree)
library(DiagrammeR)
# Fit rpart model to iris dataset
fit <- rpart(Species ~ ., data = iris)
# Convert rpart model to data.tree object
tree <- as.Node(rpart2tree(fit))
library(rpart)
library(DiagrammeR)
# Fit an rpart model to the iris dataset
iris.rpart <- rpart(Species ~ ., data = iris)
# Convert the rpart object to a DiagrammeR graph
iris.graph <- ToDiagrammeRGraph(iris.rpart)
install.packages(c("DiagrammeR", "DiagrammeRsvg", "rsvg"), dependencies = TRUE)
install.packages(c("DiagrammeR", "DiagrammeRsvg", "rsvg"), dependencies = TRUE)
packageVersion("DiagrammeR")
install.packages("DiagrammeR")
library(DiagrammeR)
check_graphviz()
> check_graphviz()
Error in check_graphviz() : could not find function "check_graphviz"
>
library(DiagrammeR)
library(DiagrammeRsvg)
rs_graphviz_version()
install.packages("sys")
library(sys)
has.command("dot")
install.packages("processx")
library(processx)
which("dot")
library(Sys)
Sys.which("dot")
Sys.setenv(PATH = paste(Sys.getenv("PATH"), "/path/to/graphviz/bin", sep = ";"))
# Convert the rpart object to a DiagrammeR graph
iris.graph <- ToDiagrammeRGraph(iris.rpart)
library(rpart)
library(DiagrammeR)
# Fit an rpart model to the iris dataset
iris.rpart <- rpart(Species ~ ., data = iris)
# Convert the rpart object to a DiagrammeR graph
iris.graph <- ToDiagrammeRGraph(iris.rpart)
# Convert the DiagrammeR graph to a Sankey diagram
iris.sankey <- DiagrammeR::render_sankey(
iris.graph,
source_col = "label",
target_col = "edge_label",
value_col = "edge_weight",
node_title_col = "label",
link_title_col = "edge_label",
link_color = "#cccccc",
node_width = 30,
node_padding = 20,
link_width = 20,
margin_left = 100,
margin_right = 100,
margin_top = 50,
margin_bottom = 50
)
# Display the Sankey diagram
iris.sankey
library(Sys)
Sys.which("dot")
895 + (.15 * (28950-8950))
2500*12
895 + (.15 * (30000-8950))
895 + (.15 * (30000-8950))/12
4052/12
4990/36250
36250/4990
120000
2.47*7500
120000+1100000
(120000+1100000)
(120000+1100000) / 18525
112*12
1344/60
0.77*30
0.6*40
0.6*30
1818+24+23.1
18+24+23.1
0.7*15
0.76*15
0.63*22.5
0.7*22.5
0.85*10
23.1+24+18
65.1
10.5.11.4.14.175.15.75+8.5
10.5.11.4.14.175+15.75+8.5
10.5.11.4+14.175+15.75+8.5
10.5+11.4+14.175+15.75+8.5
65.1+60.3
125.4/2
0.64*15
69.3
69.3 + 65.1
134.4/2
0.7*0.7
40*1.25
250*12
3000*0.4
7.4*3000
22200 - (7*3000)
25*5*12
1500 * 7.4
11100 - (1500*7)
2*25*5*12
3000 * 10.3
30900 - (3000*10)
30900 - (3000*9.7)
(3377-2558) / 3377
2558*1.24
(3377-2558) / 2558
25578*1.32
2558*1.32
70-50
20/12
76-50
26/12
356646-342968
860/12
4000/12
3622.71/2
159/2
174/4
150/4
93/2
39+221+46+53+108+223
39+221+46+53+108+223+668
39+221+46+53+108+223+550+96
39*2
getwd()
setwd("Documents/GitHub/repos/Payments/Data/")
LS
ls
dir()
dat = read.csv(dir())
library(tidyverse)
dat %>% shape
dat %>% dim
dat %>% names
dat %>% head
skim(dat)
skimr::skim(dat)
dat %>% head
dat$stat %>% table
dat$failure_reason %>% table
